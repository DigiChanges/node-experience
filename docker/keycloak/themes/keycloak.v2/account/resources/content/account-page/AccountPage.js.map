{"version":3,"sources":["../../../src/app/content/account-page/AccountPage.tsx"],"names":["React","ActionGroup","Button","Form","FormGroup","TextInput","Grid","GridItem","ExpandableSection","ValidatedOptions","PageSection","PageSectionVariants","Text","TextVariants","TextContent","AccountServiceContext","Msg","ContentPage","ContentAlert","LocaleSelector","KeycloakContext","AIACommand","AccountPage","Component","constructor","props","context","features","isRegistrationEmailAsUsername","isEditUserNameAllowed","deleteAccountAllowed","errors","username","firstName","lastName","email","formFields","attributes","DEFAULT_STATE","fetchPersonalInfo","value","event","target","currentTarget","name","setState","state","validationMessage","preventDefault","form","isValid","checkValidity","reqData","doPost","then","success","locale","window","location","reload","formData","FormData","validationMessages","Array","from","keys","reduce","acc","key","elements","keycloak","execute","handleChange","error","default","doGet","response","data","render","fields","light","small","localize","handleSubmit","isInternationalizationEnabled","Object","values","filter","e","length","handleCancel","isDeleteAccountAllowed","marginTop","handleDelete"],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as React from 'react';\nimport { ActionGroup, \n    Button, \n    Form, \n    FormGroup, \n    TextInput, \n    Grid, \n    GridItem, \n    ExpandableSection, \n    ValidatedOptions,\n    PageSection,\n    PageSectionVariants,\n    Text,\n    TextVariants,\n    TextContent\n} from '@patternfly/react-core';\n\nimport { HttpResponse } from '../../account-service/account.service';\nimport { AccountServiceContext } from '../../account-service/AccountServiceContext';\nimport { Features } from '../../widgets/features';\nimport { Msg } from '../../widgets/Msg';\nimport { ContentPage } from '../ContentPage';\nimport { ContentAlert } from '../ContentAlert';\nimport { LocaleSelector } from '../../widgets/LocaleSelectors';\nimport { KeycloakContext } from '../../keycloak-service/KeycloakContext';\nimport { KeycloakService } from '../../keycloak-service/keycloak.service';\nimport { AIACommand } from '../../util/AIACommand';\n\ndeclare const features: Features;\ndeclare const locale: string;\n\ninterface AccountPageProps {\n}\n\ninterface FormFields {\n    readonly username?: string;\n    readonly firstName?: string;\n    readonly lastName?: string;\n    readonly email?: string;\n    attributes?: { locale?: [string] };\n}\n\ninterface AccountPageState {\n    readonly errors: FormFields;\n    readonly formFields: FormFields;\n}\n\n/**\n * @author Stan Silvert ssilvert@redhat.com (C) 2018 Red Hat Inc.\n */\nexport class AccountPage extends React.Component<AccountPageProps, AccountPageState> {\n    static contextType = AccountServiceContext;\n    context: React.ContextType<typeof AccountServiceContext>;\n    private isRegistrationEmailAsUsername: boolean = features.isRegistrationEmailAsUsername;\n    private isEditUserNameAllowed: boolean = features.isEditUserNameAllowed;\n    private isDeleteAccountAllowed: boolean = features.deleteAccountAllowed;\n    private readonly DEFAULT_STATE: AccountPageState = {\n        errors: {\n            username: '',\n            firstName: '',\n            lastName: '',\n            email: ''\n        },\n        formFields: {\n            username: '',\n            firstName: '',\n            lastName: '',\n            email: '',\n            attributes: {}\n        }\n    };\n\n    public state: AccountPageState = this.DEFAULT_STATE;\n\n    public constructor(props: AccountPageProps, context: React.ContextType<typeof AccountServiceContext>) {\n        super(props);\n        this.context = context;\n\n        this.fetchPersonalInfo();\n    }\n\n    private fetchPersonalInfo(): void {\n        this.context!.doGet<FormFields>(\"/\")\n            .then((response: HttpResponse<FormFields>) => {\n                this.setState(this.DEFAULT_STATE);\n                const formFields = response.data;\n                if (!formFields!.attributes) {\n                    formFields!.attributes = { locale: [locale] };\n                }\n                else if (!formFields!.attributes.locale) {\n                    formFields!.attributes.locale = [locale];\n                }\n\n                this.setState({...{ formFields: formFields as FormFields }});\n            });\n    }\n\n    private handleCancel = (): void => {\n        this.fetchPersonalInfo();\n    }\n\n    private handleChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.currentTarget;\n        const name = target.name;\n\n        this.setState({\n            errors: { ...this.state.errors, [name]: target.validationMessage },\n            formFields: { ...this.state.formFields, [name]: value }\n        });\n    }\n\n    private handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        const form = event.target as HTMLFormElement;\n        const isValid = form.checkValidity();\n        if (isValid) {\n            const reqData: FormFields = { ...this.state.formFields };\n            this.context!.doPost<void>(\"/\", reqData)\n                .then(() => {\n                    ContentAlert.success('accountUpdatedMessage');\n                    if (locale !== this.state.formFields.attributes!.locale![0]) {\n                        window.location.reload();\n                    }\n                });\n        } else {\n            const formData = new FormData(form);\n            const validationMessages = Array.from(formData.keys()).reduce((acc, key) => {\n                acc[key] = form.elements[key].validationMessage\n                return acc\n            }, {});\n            this.setState({\n                errors: { ...validationMessages },\n                formFields: this.state.formFields\n            });\n        }\n\n    }\n\n    private handleDelete = (keycloak: KeycloakService): void => {\n        new AIACommand(keycloak, \"delete_account\").execute();\n    }\n\n    public render(): React.ReactNode {\n        const fields: FormFields = this.state.formFields;\n        return (\n            <ContentPage\n                title=\"personalInfoHtmlTitle\"\n                introMessage=\"personalSubMessage\"\n            >\n                <PageSection isFilled variant={PageSectionVariants.light}>\n                    <TextContent className=\"pf-u-mb-lg\">\n                        <Text component={TextVariants.small}>\n                          {Msg.localize('allFieldsRequired')}\n                        </Text>\n                    </TextContent>\n                    <Form\n                        onSubmit={(event) => this.handleSubmit(event)}\n                        className=\"personal-info-form\"\n                    >\n                        {!this.isRegistrationEmailAsUsername && (\n                            <FormGroup\n                                label={Msg.localize(\"username\")}\n                                fieldId=\"user-name\"\n                                helperTextInvalid={this.state.errors.username}\n                                validated={\n                                    this.state.errors.username !== \"\"\n                                        ? ValidatedOptions.error\n                                        : ValidatedOptions.default\n                                }\n                            >\n                                {this.isEditUserNameAllowed && <this.UsernameInput />}\n                                {!this.isEditUserNameAllowed && (\n                                    <this.RestrictedUsernameInput />\n                                )}\n                            </FormGroup>\n                        )}\n                        <FormGroup\n                            label={Msg.localize(\"email\")}\n                            fieldId=\"email-address\"\n                            helperTextInvalid={this.state.errors.email}\n                            validated={\n                                this.state.errors.email !== \"\"\n                                    ? ValidatedOptions.error\n                                    : ValidatedOptions.default\n                            }\n                        >\n                            <TextInput\n                                isRequired\n                                type=\"email\"\n                                id=\"email-address\"\n                                name=\"email\"\n                                maxLength={254}\n                                value={fields.email}\n                                onChange={this.handleChange}\n                                validated={\n                                    this.state.errors.email !== \"\"\n                                        ? ValidatedOptions.error\n                                        : ValidatedOptions.default\n                                }\n                            ></TextInput>\n                        </FormGroup>\n                        <FormGroup\n                            label={Msg.localize(\"firstName\")}\n                            fieldId=\"first-name\"\n                            helperTextInvalid={this.state.errors.firstName}\n                            validated={\n                                this.state.errors.firstName !== \"\"\n                                    ? ValidatedOptions.error\n                                    : ValidatedOptions.default\n                            }\n                        >\n                            <TextInput\n                                isRequired\n                                type=\"text\"\n                                id=\"first-name\"\n                                name=\"firstName\"\n                                maxLength={254}\n                                value={fields.firstName}\n                                onChange={this.handleChange}\n                                validated={\n                                    this.state.errors.firstName !== \"\"\n                                        ? ValidatedOptions.error\n                                        : ValidatedOptions.default\n                                }\n                            ></TextInput>\n                        </FormGroup>\n                        <FormGroup\n                            label={Msg.localize(\"lastName\")}\n                            fieldId=\"last-name\"\n                            helperTextInvalid={this.state.errors.lastName}\n                            validated={\n                                this.state.errors.lastName !== \"\"\n                                    ? ValidatedOptions.error\n                                    : ValidatedOptions.default\n                            }\n                        >\n                            <TextInput\n                                isRequired\n                                type=\"text\"\n                                id=\"last-name\"\n                                name=\"lastName\"\n                                maxLength={254}\n                                value={fields.lastName}\n                                onChange={this.handleChange}\n                                validated={\n                                    this.state.errors.lastName !== \"\"\n                                        ? ValidatedOptions.error\n                                        : ValidatedOptions.default\n                                }\n                            ></TextInput>\n                        </FormGroup>\n                        {features.isInternationalizationEnabled && (\n                            <FormGroup\n                                label={Msg.localize(\"selectLocale\")}\n                                isRequired\n                                fieldId=\"locale\"\n                            >\n                                <LocaleSelector\n                                    id=\"locale-selector\"\n                                    value={fields.attributes!.locale || \"\"}\n                                    onChange={(value) =>\n                                        this.setState({\n                                            errors: this.state.errors,\n                                            formFields: {\n                                                ...this.state.formFields,\n                                                attributes: {\n                                                    ...this.state.formFields.attributes,\n                                                    locale: [value],\n                                    },\n                                    },\n                                    })\n                                    }\n                                />\n                            </FormGroup>\n                        )}\n                        <ActionGroup>\n                            <Button\n                                type=\"submit\"\n                                id=\"save-btn\"\n                                variant=\"primary\"\n                                isDisabled={\n                                    Object.values(this.state.errors).filter((e) => e !== \"\")\n                                    .length !== 0\n                                }\n                            >\n                                <Msg msgKey=\"doSave\" />\n                            </Button>\n                            <Button\n                                id=\"cancel-btn\"\n                                variant=\"link\"\n                                onClick={this.handleCancel}\n                            >\n                                <Msg msgKey=\"doCancel\" />\n                            </Button>\n                        </ActionGroup>\n                    </Form>\n\n            {this.isDeleteAccountAllowed && (\n                <div id=\"delete-account\" style={{ marginTop: \"30px\" }}>\n                    <ExpandableSection toggleText=\"Delete Account\">\n                        <Grid hasGutter>\n                            <GridItem span={6}>\n                                <p>\n                                    <Msg msgKey=\"deleteAccountWarning\" />\n                                </p>\n                            </GridItem>\n                            <GridItem span={4}>\n                                <KeycloakContext.Consumer>\n                                    {(keycloak: KeycloakService) => (\n                                        <Button\n                                            id=\"delete-account-btn\"\n                                            variant=\"danger\"\n                                            onClick={() => this.handleDelete(keycloak)}\n                                            className=\"delete-button\"\n                                        >\n                                            <Msg msgKey=\"doDelete\" />\n                                        </Button>\n                                    )}\n                                </KeycloakContext.Consumer>\n                            </GridItem>\n                            <GridItem span={2}></GridItem>\n                        </Grid>\n                    </ExpandableSection>\n                </div>\n            )}\n            </PageSection>\n        </ContentPage>\n        );\n    }\n\n    private UsernameInput = () => (\n        <TextInput\n            isRequired\n            type=\"text\"\n            id=\"user-name\"\n            name=\"username\"\n            maxLength={254}\n            value={this.state.formFields.username}\n            onChange={this.handleChange}\n            validated={this.state.errors.username !== '' ? ValidatedOptions.error : ValidatedOptions.default}\n            >\n        </TextInput>\n    );\n\n    private RestrictedUsernameInput = () => (\n        <TextInput\n            isReadOnly\n            type=\"text\"\n            id=\"user-name\"\n            name=\"username\"\n            value={this.state.formFields.username}\n        >\n        </TextInput>\n    );\n};\n"],"file":"AccountPage.js"}