{"version":3,"sources":["../../../src/app/content/signingin-page/SigningInPage.tsx"],"names":["React","withRouter","Alert","Button","DataList","DataListAction","DataListItemCells","DataListCell","DataListItem","DataListItemRow","EmptyState","EmptyStateVariant","EmptyStateBody","Split","SplitItem","Title","Dropdown","DropdownPosition","KebabToggle","PageSection","PageSectionVariants","AIACommand","TimeUtil","AccountServiceContext","ContinueCancelModal","Msg","ContentPage","ContentAlert","KeycloakContext","SigningInPage","Component","constructor","props","context","credentialId","userLabel","doDelete","then","getCredentialContainers","success","state","credentialContainers","Map","doGet","response","allContainers","containers","data","forEach","container","categoryMap","get","category","set","type","setState","credElementId","credType","credId","item","substring","render","renderCategories","Array","from","keys","map","light","renderTypes","credTypeMap","keycloak","index","typeArray","renderCredTypeTitle","renderUserCredentials","renderEmptyRow","isLast","credContainer","userCredentialMetadatas","removeable","displayName","length","localizedDisplayName","localize","xs","credentialMetadata","credential","hasOwnProperty","createdDate","strCreatedDate","format","updateAIA","updateAction","maxWidth","infoMessage","warningMessageTitle","warningMessageDescription","JSON","parse","key","parameters","id","credentialRowCells","handleRemove","credMetadata","credRowCells","push","setupAction","createAction","credContainerDisplayName","helptext","right","isOpen","open","execute","CredentialAction","credRemover","SigningInPageWithRouter"],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport {\n    Alert,\n    Button,\n    DataList,\n    DataListAction,\n    DataListItemCells,\n    DataListCell,\n    DataListItem,\n    DataListItemRow,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateBody,\n    Split,\n    SplitItem,\n    Title,\n    Dropdown,\n    DropdownPosition,\n    KebabToggle,\n    PageSection,\n    PageSectionVariants\n} from \"@patternfly/react-core\";\n\nimport { AIACommand } from \"../../util/AIACommand\";\nimport TimeUtil from \"../../util/TimeUtil\";\nimport {\n    HttpResponse,\n    AccountServiceClient,\n} from \"../../account-service/account.service\";\nimport { AccountServiceContext } from \"../../account-service/AccountServiceContext\";\nimport { ContinueCancelModal } from \"../../widgets/ContinueCancelModal\";\nimport { Features } from \"../../widgets/features\";\nimport { Msg } from \"../../widgets/Msg\";\nimport { ContentPage } from \"../ContentPage\";\nimport { ContentAlert } from \"../ContentAlert\";\nimport { KeycloakContext } from \"../../keycloak-service/KeycloakContext\";\nimport { KeycloakService } from \"../../keycloak-service/keycloak.service\";\nimport { css } from \"@patternfly/react-styles\";\n\ndeclare const features: Features;\n\ninterface PasswordDetails {\n    registered: boolean;\n    lastUpdate: number;\n}\n\ntype CredCategory = \"password\" | \"two-factor\" | \"passwordless\";\ntype CredType = string;\ntype CredTypeMap = Map<CredType, CredentialContainer>;\ntype CredContainerMap = Map<CredCategory, CredTypeMap>;\n\ninterface CredMetadata {\n    infoMessage?: string;\n    warningMessageTitle?: string;\n    warningMessageDescription?: string;\n    credential: UserCredential;\n}\n\ninterface UserCredential {\n    id: string;\n    type: string;\n    userLabel: string;\n    createdDate?: number;\n    strCreatedDate?: string;\n    credentialData?: string;\n}\n\n// A CredentialContainer is unique by combo of credential type and credential category\ninterface CredentialContainer {\n    category: CredCategory;\n    type: CredType;\n    displayName: string;\n    helptext?: string;\n    createAction?: string;\n    updateAction?: string;\n    removeable: boolean;\n    userCredentialMetadatas: CredMetadata[];\n    open: boolean;\n}\n\ninterface SigningInPageProps extends RouteComponentProps {}\n\ninterface SigningInPageState {\n    // Credential containers organized by category then type\n    credentialContainers: CredContainerMap;\n}\n\n/**\n * @author Stan Silvert ssilvert@redhat.com (C) 2018 Red Hat Inc.\n */\nclass SigningInPage extends React.Component<\n    SigningInPageProps,\n    SigningInPageState\n> {\n    static contextType = AccountServiceContext;\n    context: React.ContextType<typeof AccountServiceContext>;\n\n    public constructor(\n        props: SigningInPageProps,\n        context: React.ContextType<typeof AccountServiceContext>\n    ) {\n        super(props);\n        this.context = context;\n\n        this.state = {\n            credentialContainers: new Map(),\n        };\n\n        this.getCredentialContainers();\n    }\n\n    private getCredentialContainers(): void {\n        this.context!.doGet(\"/credentials\").then(\n            (response: HttpResponse<CredentialContainer[]>) => {\n                const allContainers: CredContainerMap = new Map();\n                const containers: CredentialContainer[] = response.data || [];\n                containers.forEach((container) => {\n                    let categoryMap = allContainers.get(container.category);\n                    if (!categoryMap) {\n                        categoryMap = new Map();\n                        allContainers.set(container.category, categoryMap);\n                    }\n                    categoryMap.set(container.type, container);\n                });\n\n                this.setState({ credentialContainers: allContainers });\n            }\n        );\n    }\n\n    private handleRemove = (credentialId: string, userLabel: string) => {\n        this.context!.doDelete(\"/credentials/\" + credentialId).then(() => {\n            this.getCredentialContainers();\n            ContentAlert.success(\"successRemovedMessage\", [userLabel]);\n        });\n    };\n\n    public static credElementId(\n        credType: CredType,\n        credId: string,\n        item: string\n    ): string {\n        return `${credType}-${item}-${credId.substring(0, 8)}`;\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <ContentPage title=\"signingIn\" introMessage=\"signingInSubMessage\">\n                {this.renderCategories()}\n            </ContentPage>\n        );\n    }\n\n    private renderCategories(): React.ReactNode {\n      return Array.from(this.state.credentialContainers.keys()).map(\n          (category) => (\n            <PageSection key={category} variant={PageSectionVariants.light}>\n              <Title\n                  id={`${category}-categ-title`}\n                  headingLevel=\"h2\"\n                  size=\"xl\"\n              >\n                <Msg msgKey={category} />\n              </Title>\n              {this.renderTypes(category!)}\n            </PageSection>\n         )\n       ) \n    }\n\n    private renderTypes(category: CredCategory): React.ReactNode {\n        let credTypeMap: CredTypeMap = this.state.credentialContainers.get(\n            category\n        )!;\n\n        return (\n            <KeycloakContext.Consumer>\n                {(keycloak) => (\n                    <>\n                        {Array.from(\n                            credTypeMap.keys()\n                        ).map(\n                            (\n                                credType: CredType,\n                                index: number,\n                                typeArray: string[]\n                            ) => [\n                                this.renderCredTypeTitle(\n                                    credTypeMap.get(credType)!,\n                                    keycloak!,\n                                    category\n                                ),\n                                this.renderUserCredentials(\n                                    credTypeMap,\n                                    credType,\n                                    keycloak!\n                                ),\n                            ]\n                        )}\n                    </>\n                )}\n            </KeycloakContext.Consumer>\n        );\n    }\n\n    private renderEmptyRow(type: string, isLast: boolean): React.ReactNode {\n        if (isLast) return; // don't put empty row at the end\n\n        return (\n            <DataListItem aria-labelledby={\"empty-list-item-\" + type}>\n                <DataListItemRow key={\"empty-row-\" + type}>\n                    <DataListItemCells\n                        dataListCells={[<DataListCell></DataListCell>]}\n                    />\n                </DataListItemRow>\n            </DataListItem>\n        );\n    }\n\n    private renderUserCredentials(\n        credTypeMap: CredTypeMap,\n        credType: CredType,\n        keycloak: KeycloakService\n    ): React.ReactNode {\n        const credContainer: CredentialContainer = credTypeMap.get(credType)!;\n        const userCredentialMetadatas: CredMetadata[] = credContainer.userCredentialMetadatas;\n        const removeable: boolean = credContainer.removeable;\n        const type: string = credContainer.type;\n        const displayName: string = credContainer.displayName;\n\n        if (!userCredentialMetadatas || userCredentialMetadatas.length === 0) {\n            const localizedDisplayName = Msg.localize(displayName);\n            return (\n              <DataList aria-label={Msg.localize('notSetUp', [localizedDisplayName])} className=\"pf-u-mb-xl\">\n                <DataListItem key='no-credentials-list-item' aria-labelledby={Msg.localize('notSetUp', [localizedDisplayName])}>\n                    <DataListItemRow key='no-credentials-list-item-row' className=\"pf-u-align-items-center\">\n                        <DataListItemCells\n                            dataListCells={[\n                                <DataListCell key={'no-credentials-cell-0'}/>,\n                                <EmptyState id={`${type}-not-set-up`} key={'no-credentials-cell-1'} variant={EmptyStateVariant.xs}>\n                                    <EmptyStateBody>\n                                        <Msg msgKey='notSetUp' params={[localizedDisplayName]}/>\n                                    </EmptyStateBody>\n                                </EmptyState>,\n                                <DataListCell key={'no-credentials-cell-2'}/>\n                            ]}/>\n                    </DataListItemRow>\n                </DataListItem>\n              </DataList>\n            );\n        }\n\n        userCredentialMetadatas.forEach(credentialMetadata => {\n            let credential = credentialMetadata.credential;\n            if (!credential.userLabel) credential.userLabel = Msg.localize(credential.type);\n            if (credential.hasOwnProperty('createdDate') && credential.createdDate && credential.createdDate! > 0) {\n                credential.strCreatedDate = TimeUtil.format(credential.createdDate as number);\n            }\n        });\n\n        let updateAIA: AIACommand;\n        if (credContainer.updateAction) {\n            updateAIA = new AIACommand(keycloak, credContainer.updateAction);\n        }\n\n        let maxWidth = { maxWidth: 689 } as React.CSSProperties;\n\n        return (\n            <React.Fragment key='userCredentialMetadatas'> {\n                userCredentialMetadatas.map(credentialMetadata => (\n                  <>\n                    {(credentialMetadata.infoMessage && !credentialMetadata.warningMessageTitle && !credentialMetadata.warningMessageDescription) && \n                      <Alert variant=\"default\" className=\"pf-u-mb-md\" isInline isPlain title={Msg.localize(JSON.parse(credentialMetadata.infoMessage).key, JSON.parse(credentialMetadata.infoMessage).parameters)} />\n                    }\n                    {(credentialMetadata.warningMessageTitle && credentialMetadata.warningMessageDescription) &&\n                      <Alert variant=\"warning\" className=\"pf-u-mb-md\" isInline title={Msg.localize(JSON.parse(credentialMetadata.warningMessageTitle).key, JSON.parse(credentialMetadata.warningMessageTitle).parameters)} style={maxWidth}>\n                                \n                        <p>{Msg.localize(JSON.parse(credentialMetadata.warningMessageDescription).key, JSON.parse(credentialMetadata.warningMessageDescription).parameters)}</p>\n                      </Alert>\n                    }\n                    <DataList aria-label=\"user credential\" className=\"pf-u-mb-xl\">\n                      <DataListItem id={`${SigningInPage.credElementId(type, credentialMetadata.credential.id, 'row')}`} key={'credential-list-item-' + credentialMetadata.credential.id} aria-labelledby={'credential-list-item-' + credentialMetadata.credential.userLabel}>\n                          <DataListItemRow key={'userCredentialRow-' + credentialMetadata.credential.id} className=\"pf-u-align-items-center\">\n                              <DataListItemCells dataListCells={this.credentialRowCells(credentialMetadata, type)}/>\n                              <CredentialAction\n                                credential={credentialMetadata.credential}\n                                removeable={removeable}\n                                updateAction={updateAIA}\n                                credRemover={this.handleRemove}\n                              />\n                          </DataListItemRow>\n                      </DataListItem>\n                    </DataList>\n                  </>\n                ))\n            } </React.Fragment>\n        )\n    }\n\n    private credentialRowCells(credMetadata: CredMetadata, type: string): React.ReactNode[] {\n        const credRowCells: React.ReactNode[] = [];\n        const credential = credMetadata.credential;\n        let maxWidth = { \"--pf-u-max-width--MaxWidth\": \"300px\" } as React.CSSProperties;\n        credRowCells.push(\n            <DataListCell id={`${SigningInPage.credElementId(type, credential.id, 'label')}`} key={'userLabel-' + credential.id} className=\"pf-u-max-width\" style={maxWidth}>\n                {credential.userLabel}\n            </DataListCell>\n        );\n        if (credential.strCreatedDate) {\n            credRowCells.push(\n                <DataListCell\n                    id={`${SigningInPage.credElementId(\n                        type,\n                        credential.id,\n                        \"created-at\"\n                    )}`}\n                    key={\"created-\" + credential.id}\n                >\n                    <strong className=\"pf-u-mr-md\">\n                        <Msg msgKey=\"credentialCreatedAt\" />{\" \"}\n                    </strong>\n                    {credential.strCreatedDate}\n                </DataListCell>\n            );\n            credRowCells.push(<DataListCell key={\"spacer-\" + credential.id} />);\n        }\n\n        return credRowCells;\n    }\n\n    private renderCredTypeTitle(\n        credContainer: CredentialContainer,\n        keycloak: KeycloakService,\n        category: CredCategory\n    ): React.ReactNode {\n      \n        if (\n            !credContainer.hasOwnProperty(\"helptext\") &&\n            !credContainer.hasOwnProperty(\"createAction\")\n        )\n            return;\n\n        let setupAction: AIACommand;\n        if (credContainer.createAction) {\n            setupAction = new AIACommand(keycloak, credContainer.createAction);\n        }\n\n        const credContainerDisplayName: string = Msg.localize(\n            credContainer.displayName\n        );\n        return (\n            <React.Fragment key={\"credTypeTitle-\" + credContainer.type}>\n                <Split className=\"pf-u-mt-lg pf-u-mb-lg\">\n                    <SplitItem>\n                        <Title\n                            headingLevel=\"h3\"\n                            size=\"md\"\n                            className=\"pf-u-mb-md\"\n                        >\n                            <span className=\"cred-title pf-u-display-block\" id={`${credContainer.type}-cred-title`}>\n                                <Msg msgKey={credContainer.displayName} />\n                            </span>\n                        </Title>\n                        <span id={`${credContainer.type}-cred-help`}>\n                            {credContainer.helptext && (\n                                <Msg msgKey={credContainer.helptext} />\n                            )}\n                        </span>\n                    </SplitItem>\n\n                    <SplitItem isFilled>\n                        {credContainer.createAction && (\n                            <div\n                                id={\"mob-setUpAction-\" + credContainer.type}\n                                className=\"pf-u-display-none-on-lg pf-u-float-right\"\n                            >\n                                <Dropdown\n                                    isPlain\n                                    position={DropdownPosition.right}\n                                    toggle={\n                                        <KebabToggle\n                                            onToggle={(isOpen) => {\n                                                credContainer.open = isOpen;\n                                                this.setState({\n                                                    credentialContainers: new Map(\n                                                        this.state.credentialContainers\n                                                    ),\n                                                });\n                                            }}\n                                        />\n                                    }\n                                    isOpen={credContainer.open}\n                                    dropdownItems={[\n                                        <button\n                                            id={`mob-${credContainer.type}-set-up`}\n                                            className=\"pf-c-button pf-m-link\"\n                                            type=\"button\"\n                                            onClick={() =>\n                                                setupAction.execute()\n                                            }\n                                        >\n                                            <span className=\"pf-c-button__icon\">\n                                                <i\n                                                    className=\"fas fa-plus-circle\"\n                                                    aria-hidden=\"true\"\n                                                ></i>\n                                            </span>\n                                            <Msg\n                                                msgKey=\"setUpNew\"\n                                                params={[\n                                                    credContainerDisplayName,\n                                                ]}\n                                            />\n                                        </button>,\n                                    ]}\n                                />\n                            </div>\n                        )}\n                        {credContainer.createAction && (\n                            <div\n                                id={\"setUpAction-\" + credContainer.type}\n                                className=\"pf-u-display-none pf-u-display-inline-flex-on-lg pf-u-float-right\"\n                            >\n                                <button\n                                    id={`${credContainer.type}-set-up`}\n                                    className=\"pf-c-button pf-m-link\"\n                                    type=\"button\"\n                                    onClick={() => setupAction.execute()}\n                                >\n                                    <span className=\"pf-c-button__icon\">\n                                        <i\n                                            className=\"fas fa-plus-circle\"\n                                            aria-hidden=\"true\"\n                                        ></i>\n                                    </span>\n                                    <Msg\n                                        msgKey=\"setUpNew\"\n                                        params={[credContainerDisplayName]}\n                                    />\n                                </button>\n                            </div>\n                        )}\n                    </SplitItem>\n                </Split>\n            </React.Fragment>\n        );\n    }\n}\n\ntype CredRemover = (credentialId: string, userLabel: string) => void;\ninterface CredentialActionProps {\n    credential: UserCredential;\n    removeable: boolean;\n    updateAction: AIACommand;\n    credRemover: CredRemover;\n};\n\nclass CredentialAction extends React.Component<CredentialActionProps> {\n    render(): React.ReactNode {\n        if (this.props.updateAction) {\n            return (\n                <DataListAction\n                    aria-labelledby={Msg.localize('updateCredAriaLabel')}\n                    aria-label={Msg.localize('updateCredAriaLabel')}\n                    id={\"updateAction-\" + this.props.credential.id}\n                >\n                    <Button\n                        variant=\"secondary\"\n                        id={`${SigningInPage.credElementId(\n                            this.props.credential.type,\n                            this.props.credential.id,\n                            \"update\"\n                        )}`}\n                        onClick={() => this.props.updateAction.execute()}\n                    >\n                        <Msg msgKey=\"update\" />\n                    </Button>\n                </DataListAction>\n            );\n        }\n\n        if (this.props.removeable) {\n            const userLabel: string = this.props.credential.userLabel;\n            return (\n                <DataListAction\n                  aria-label={Msg.localize('removeCredAriaLabel')}\n                  aria-labelledby={Msg.localize('removeCredAriaLabel')}\n                  id={'removeAction-' + this.props.credential.id }\n                >\n                    <ContinueCancelModal \n                        buttonTitle='remove'\n                        buttonVariant='danger'\n                        buttonId={`${SigningInPage.credElementId(this.props.credential.type, this.props.credential.id, 'remove')}`}\n                        modalTitle={Msg.localize('removeCred', [userLabel])}\n                        modalMessage={Msg.localize('stopUsingCred', [userLabel])}\n                        onContinue={() => this.props.credRemover(this.props.credential.id, userLabel)}\n                    />\n                </DataListAction>\n            );\n        }\n\n        return <></>;\n    }\n}\n\nconst SigningInPageWithRouter = withRouter(SigningInPage);\nexport { SigningInPageWithRouter as SigningInPage };\n"],"file":"SigningInPage.js"}